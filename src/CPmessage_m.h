//
// Generated file, do not edit! Created by opp_msgc 4.1 from CPmessage.msg.
//

#ifndef _CPMESSAGE_M_H_
#define _CPMESSAGE_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0401
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif



/**
 * Class generated from <tt>CPmessage.msg</tt> by opp_msgc.
 * <pre>
 * packet CPmessage
 * {
 *     int src;
 *     int dest;
 * 
 *     string cpm;
 *     bool rollingback = false;
 *     bool mainflow = true;
 *     bool interpreted = false;
 *     bool processed = false;
 *     bool failed = false;
 * 
 *     simtime_t startTime = 0.0;
 *     simtime_t procTime = 0.0;
 *     simtime_t interpretTime = 0.0;
 *     simtime_t queueTime = 0.0;
 *     simtime_t queueDelay = 0.0;
 *     simtime_t skew = 0.0;
 *     simtime_t commTime = 0.0;
 *     simtime_t failLastDetectTime = 0.0;
 *     simtime_t rollbackStartTime = 0.0;
 * 	int numRepeats = 0;
 *     int numSites = 0;
 *     int sites[100];
 *     int numSitesVisited = 0;
 *     int sitesVisited[100];
 * }
 * </pre>
 */
class CPmessage : public ::cPacket
{
  protected:
    int src_var;
    int dest_var;
    opp_string cpm_var;
    bool rollingback_var;
    bool mainflow_var;
    bool interpreted_var;
    bool processed_var;
    bool failed_var;
    simtime_t startTime_var;
    simtime_t procTime_var;
    simtime_t interpretTime_var;
    simtime_t queueTime_var;
    simtime_t queueDelay_var;
    simtime_t skew_var;
    simtime_t commTime_var;
    simtime_t failLastDetectTime_var;
    simtime_t rollbackStartTime_var;
    int numRepeats_var;
    int numSites_var;
    int sites_var[100];
    int numSitesVisited_var;
    int sitesVisited_var[100];

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const CPmessage&);

  public:
    CPmessage(const char *name=NULL, int kind=0);
    CPmessage(const CPmessage& other);
    virtual ~CPmessage();
    CPmessage& operator=(const CPmessage& other);
    virtual CPmessage *dup() const {return new CPmessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getSrc() const;
    virtual void setSrc(int src_var);
    virtual int getDest() const;
    virtual void setDest(int dest_var);
    virtual const char * getCpm() const;
    virtual void setCpm(const char * cpm_var);
    virtual bool getRollingback() const;
    virtual void setRollingback(bool rollingback_var);
    virtual bool getMainflow() const;
    virtual void setMainflow(bool mainflow_var);
    virtual bool getInterpreted() const;
    virtual void setInterpreted(bool interpreted_var);
    virtual bool getProcessed() const;
    virtual void setProcessed(bool processed_var);
    virtual bool getFailed() const;
    virtual void setFailed(bool failed_var);
    virtual simtime_t getStartTime() const;
    virtual void setStartTime(simtime_t startTime_var);
    virtual simtime_t getProcTime() const;
    virtual void setProcTime(simtime_t procTime_var);
    virtual simtime_t getInterpretTime() const;
    virtual void setInterpretTime(simtime_t interpretTime_var);
    virtual simtime_t getQueueTime() const;
    virtual void setQueueTime(simtime_t queueTime_var);
    virtual simtime_t getQueueDelay() const;
    virtual void setQueueDelay(simtime_t queueDelay_var);
    virtual simtime_t getSkew() const;
    virtual void setSkew(simtime_t skew_var);
    virtual simtime_t getCommTime() const;
    virtual void setCommTime(simtime_t commTime_var);
    virtual simtime_t getFailLastDetectTime() const;
    virtual void setFailLastDetectTime(simtime_t failLastDetectTime_var);
    virtual simtime_t getRollbackStartTime() const;
    virtual void setRollbackStartTime(simtime_t rollbackStartTime_var);
    virtual int getNumRepeats() const;
    virtual void setNumRepeats(int numRepeats_var);
    virtual int getNumSites() const;
    virtual void setNumSites(int numSites_var);
    virtual unsigned int getSitesArraySize() const;
    virtual int getSites(unsigned int k) const;
    virtual void setSites(unsigned int k, int sites_var);
    virtual int getNumSitesVisited() const;
    virtual void setNumSitesVisited(int numSitesVisited_var);
    virtual unsigned int getSitesVisitedArraySize() const;
    virtual int getSitesVisited(unsigned int k) const;
    virtual void setSitesVisited(unsigned int k, int sitesVisited_var);
};

inline void doPacking(cCommBuffer *b, CPmessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, CPmessage& obj) {obj.parsimUnpack(b);}


#endif // _CPMESSAGE_M_H_
